def call()
{
    pipeline
    {
        agent any
        environment
        {
            APP_NAME='yaveen'
            IMAGE="${APP_NAME}:V:${BUILD_NUMBER}"
            DOCKER_REPO=""
            URL=""
        }
        stages
        {
            stage("checkout movies repo")
            {
                steps
                {
                    echo "***** clonening repos ******"
                    sh 'git clone https://github.com/devopsPRO27/movies-api'
                }
            }    

            stage("build")
            {
                steps
                {
                    echo "****** building the app ******"
                    dir('movies-api')
                    {
                    sh "docker build -t ${APP_NAME}:V:${BUILD_NUMBER}" 
                    }
                    sh "docker images | grep -i ${APP_NAME}"
                }
            }

            stage("test")
            {
                
                steps
                {
                   echo "****** testing the app ******" 
                   sh "docker run -p 8888:80 --name ${JOB_NAME} -d ${IMAGE}"
                   dir("movies/test")
                   {
                        script
                        {
                            def dockerIp = sh(
                            script: "docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${JOB_NAME}",
                            returnStdout: true
                            ).trim()
                            echo "URL: '${dockerIp}:8888/movies'"
                            def TEST_RESULT = sh(
                                script: "python test.py",
                                returnStdout: true
                            ).trim()
                            env.TEST_RESULT = TEST_RESULT
                         }
                   }
                }
                post
                {
                    sh "docker rm -f ${JOB_NAME}"
                }
            }

            stage("deploy")
            {
                steps
                {  
                        when{
                                expression 
                                {
                                    return env.TEST_RESULT != 'OK';
                                }
                            }   
                    echo "******* deploying a new version *****"  
                    withCredentials([usernamePassword(credentialsId: 'yaveen-cred', 
                                                       usernameVariable: 'DOCKER_USER', 
                                                       passwordVariable: 'DOCKER_PASS')])
                                                       {
                                                            sh '''
                                                                echo "$DOCKER_PASS" | docker login -u "DOCKER_USER" --password-stdin
                                                                docker tag "${IMAGE}" "${DOCKER_REPO}"
                                                                docker push ${DOCKER_REPO}:${BUILD_NUMBER}
                                                            '''
                                                       }
                }
                post
                {
                   sh 'docker image rm -f yaveen*'
                }
            }
        }
        post
        {
            always  
                {
                    deleteDir()
                }
        }
    }
}